#graph topologicalSort
from collections import defaultdict

class Graph:
  def __init__(self, vertices):
    self.graph = defaultdict(list)
    self.vertices = vertices

  def addEdge(self, u, v):
    self.graph[u].append(v)
  
  def recTopologicalSort(self, vertex, stack, visited):
    visited[vertex] = True
    for i in self.graph[vertex]:
      if visited[vertex] == False:
        self.recTopologicalSort(i, stack, visited)
    stack.insert(0, vertex)
  
  def topologicalSort(self):
    visited = [False] * self.vertices
    stack = []
    for i in range(self.vertices):
      if visited[i] == False:
        self.recTopologicalSort(i, stack, visited)
    print(stack)

g= Graph(6) 
g.addEdge(5, 2); 
g.addEdge(5, 0); 
g.addEdge(4, 0); 
g.addEdge(4, 1); 
g.addEdge(2, 3); 
g.addEdge(3, 1); 

g.topologicalSort()
